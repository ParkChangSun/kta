{"version":3,"sources":["mybase.js","components/FriendButton/FriendButton.js","components/SmallProfile/SmallProfile.js","utils/firestore.js","routes/Auth/Auth.js","routes/Home/Home.js","components/Navigation/Navigation.js","components/ProfileForm/ProfileForm.js","routes/MyProfile/MyProfile.js","routes/OtherProfile/OtherProfile.js","routes/NotFound/NotFound.js","components/Footer/Footer.js","components/AppRouter.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storage","FriendButton","otherId","userContext","useContext","UserIdContext","useCheckFriend","userId","isFriend","className","onClick","deleteFriend","requestFriend","SmallProfile","otherData","userName","unit","to","require","useState","useEffect","createContext","setIsFriend","isMyself","setIsMyself","collection","where","onSnapshot","snapshot","empty","useFriendsList","targetId","friends","setFriends","a","get","query","promiseArray","docs","map","doc","data","receiverId","Promise","all","values","docSnap","getFriends","requestorId","set","requestedAt","Date","now","console","log","ref","delete","updateMyProfile","newUnitName","revisedAt","Auth","provider","GoogleAuthProvider","signInWithPopup","credential","userRef","user","uid","exists","displayName","Home","info","setInfo","setData","snapshotArray","useSearchedList","setSmallProfileList","onSubmit","event","preventDefault","type","placeholder","onChange","value","target","Navigation","setIsLoggedIn","history","useHistory","signOut","push","ProfileForm","newDisplayName","setNewDisplayName","setNewUnitName","name","snapShot","MyProfile","OtherProfile","match","userData","setUserData","params","snap","getUserData","NotFound","Footer","href","AppRouter","isLoggedIn","basename","exact","path","render","props","component","from","App","init","setInit","userObj","setUserObj","setUserId","onAuthStateChanged","Provider","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3023815.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useContext } from \"react\";\nimport {\n  deleteFriend,\n  requestFriend,\n  useCheckFriend,\n  UserIdContext,\n} from \"utils/firestore\";\nimport \"./FriendButton.css\";\n\nconst FriendButton = ({ otherId }) => {\n  const userContext = useContext(UserIdContext);\n  const [isFriend, isMyself] = useCheckFriend(userContext.userId, otherId);\n  const onClick = () => {\n    if (isFriend) {\n      deleteFriend(userContext.userId, otherId);\n    } else {\n      requestFriend(userContext.userId, otherId);\n    }\n  };\n\n  return isMyself ? (\n    <button className=\"friendbutton\">it's you!</button>\n  ) : (\n    <button onClick={onClick} className=\"friendbutton\">\n      {isFriend ? \"delete friend\" : \"add friend\"}\n    </button>\n  );\n};\n\nexport default FriendButton;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport FriendButton from \"../FriendButton/FriendButton\";\nimport \"./SmallProfile.css\";\n\nconst SmallProfile = ({ otherData }) => {\n  return (\n    <li className=\"smallprofile\">\n      <p>{otherData.userName}</p>\n      <p>{otherData.unit}</p>\n      <Link to={`/profile/${otherData.userId}`}>see profile</Link>\n      <FriendButton otherId={otherData.userId} />\n    </li>\n  );\n};\n\nexport default SmallProfile;\n","import SmallProfile from \"components/SmallProfile/SmallProfile\";\nimport { dbService } from \"mybase\";\n\nconst { useState, useEffect, createContext } = require(\"react\");\n\nconst useCheckFriend = (userId, otherId) => {\n  const [isFriend, setIsFriend] = useState(false);\n  const [isMyself, setIsMyself] = useState(false);\n  useEffect(() => {\n    const checkIsFriend = () => {\n      const unSubscribe = dbService\n        .collection(\"relationship\")\n        .where(\"requestorId\", \"==\", userId)\n        .where(\"receiverId\", \"==\", otherId)\n        .onSnapshot((snapshot) => {\n          setIsFriend(!snapshot.empty);\n        });\n      return unSubscribe;\n    };\n    if (userId === otherId) {\n      setIsMyself(true);\n    }\n    const unSubscribe = checkIsFriend();\n    return unSubscribe;\n  }, [userId, otherId]);\n  return [isFriend, isMyself];\n};\n\nconst useSearchedList = () => {\n  const [data, setData] = useState([]);\n  const setSmallProfiles = (snapshotArray) => {\n    setData(\n      snapshotArray.map((docSnap) => (\n        <SmallProfile key={docSnap.data().userId} otherData={docSnap.data()} />\n      ))\n    );\n  };\n  return [data, setSmallProfiles];\n};\n\nconst useFriendsList = (targetId) => {\n  const [friends, setFriends] = useState([]);\n  useEffect(() => {\n    const getFriends = async () => {\n      const query = await dbService\n        .collection(\"relationship\")\n        .where(\"requestorId\", \"==\", targetId)\n        .get();\n      const promiseArray = query.docs.map((doc) =>\n        dbService.doc(`profile/${doc.data().receiverId}`).get()\n      );\n      const values = await Promise.all(promiseArray);\n      setFriends(\n        values.map((docSnap) => (\n          <SmallProfile\n            key={docSnap.data().userId}\n            otherData={docSnap.data()}\n          />\n        ))\n      );\n    };\n    if (targetId) getFriends();\n  }, [targetId]);\n  return friends;\n};\n\nconst requestFriend = async (requestorId, receiverId) => {\n  await dbService.collection(\"relationship\").doc().set({\n    requestorId: requestorId,\n    receiverId: receiverId,\n    requestedAt: Date.now(),\n  });\n  console.log(requestorId);\n};\n\nconst deleteFriend = async (requestorId, receiverId) => {\n  const relationSnap = await dbService\n    .collection(\"relationship\")\n    .where(\"requestorId\", \"==\", requestorId)\n    .where(\"receiverId\", \"==\", receiverId)\n    .get();\n  relationSnap.docs[0].ref.delete();\n};\n\nconst updateMyProfile = async (userId, userName, newUnitName) => {\n  await dbService.collection(\"profile\").doc(userId).set({\n    userId: userId,\n    userName: userName,\n    unit: newUnitName,\n    revisedAt: Date.now(),\n  });\n};\n\nexport {\n  useCheckFriend,\n  useSearchedList,\n  useFriendsList,\n  requestFriend,\n  deleteFriend,\n  updateMyProfile,\n};\nexport const UserIdContext = createContext({});\n","import { authService, dbService, firebaseInstance } from \"mybase\";\nimport React from \"react\";\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const provider = new firebaseInstance.auth.GoogleAuthProvider();\n  const onClick = async () => {\n    const credential = await authService.signInWithPopup(provider);\n    const userRef = dbService.doc(`profile/${credential.user.uid}`);\n    const userSnap = await userRef.get();\n    if (!userSnap.exists) {\n      userRef.set({\n        userId: credential.user.uid,\n        userName: credential.user.displayName,\n        unit: \"\",\n        revisedAt: Date.now(),\n      });\n    }\n  };\n\n  return (\n    <div className=\"auth\">\n      <p>Sign in</p>\n      <button onClick={onClick}>Google</button>\n    </div>\n  );\n};\n\nexport default Auth;\n","import { dbService } from \"mybase\";\nimport React, { useState } from \"react\";\nimport { useSearchedList } from \"utils/firestore\";\nimport \"./Home.css\";\n\nconst Home = () => {\n  const [info, setInfo] = useState(\"\");\n  const [data, setSmallProfileList] = useSearchedList();\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setInfo(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    const query = await dbService\n      .collection(\"profile\")\n      .where(\"userName\", \"==\", info)\n      .get();\n    setSmallProfileList(query.docs);\n  };\n\n  return (\n    <div className=\"home\">\n      <p>are you looking for someone?</p>\n      <form onSubmit={onSubmit} className=\"searchForm\">\n        <input\n          type=\"text\"\n          placeholder=\"type name here...\"\n          onChange={onChange}\n        />\n        <input type=\"submit\" value=\"search\" />\n      </form>\n      <ul className=\"usersfoundlist\">{data}</ul>\n    </div>\n  );\n};\n\nexport default Home;\n","import { authService } from \"mybase\";\nimport React, { useContext } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserIdContext } from \"utils/firestore\";\nimport \"./Navigation.css\";\n\nconst Navigation = ({ setIsLoggedIn }) => {\n  const userContext = useContext(UserIdContext);\n  const history = useHistory();\n  const onClick = () => {\n    authService.signOut();\n    setIsLoggedIn(false);\n    history.push(\"/\");\n  };\n\n  return (\n    <nav className=\"navigation\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/myprofile\">{userContext?.userName}</Link>\n        </li>\n        <li>\n          <button onClick={onClick}>Sign out</button>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import { dbService } from \"mybase\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { updateMyProfile, UserIdContext } from \"utils/firestore\";\n\nconst ProfileForm = () => {\n  const userContext = useContext(UserIdContext);\n  const [newDisplayName, setNewDisplayName] = useState(userContext.userName);\n  const [newUnitName, setNewUnitName] = useState(userContext.unit);\n\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"name\") {\n      setNewDisplayName(value);\n    } else if (name === \"unit\") {\n      setNewUnitName(value);\n    }\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    updateMyProfile(userContext.userId, userContext.userName, newUnitName);\n  };\n\n  useEffect(() => {\n    const unSubscribe = dbService\n      .doc(`profile/${userContext.userId}`)\n      .onSnapshot((snapShot) => {\n        setNewUnitName(snapShot.data()?.unit);\n      });\n    return unSubscribe;\n  }, [userContext]);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"name\"\n        value={newDisplayName}\n        onChange={onChange}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"unit that you belong to\"\n        name=\"unit\"\n        value={newUnitName || \"\"}\n        onChange={onChange}\n      />\n      <input type=\"submit\" value=\"update profile\" />\n    </form>\n  );\n};\n\nexport default ProfileForm;\n","import ProfileForm from \"components/ProfileForm/ProfileForm\";\nimport React, { useContext } from \"react\";\nimport { useFriendsList, UserIdContext } from \"utils/firestore\";\nimport \"./MyProfile.css\";\n\nconst MyProfile = () => {\n  const userContext = useContext(UserIdContext);\n  const friends = useFriendsList(userContext.userId);\n\n  return (\n    <div className=\"myprofile\">\n      <p>my profile</p>\n      <ProfileForm />\n      <p>friends</p>\n      <ul className=\"friendslist\">{friends}</ul>\n    </div>\n  );\n};\n\nexport default MyProfile;\n","import FriendButton from \"components/FriendButton/FriendButton\";\nimport { dbService } from \"mybase\";\nimport React, { useEffect, useState } from \"react\";\nimport { useFriendsList } from \"utils/firestore\";\nimport \"./OtherProfile.css\";\n\n// myprofile + otherprofile => ?\nconst OtherProfile = ({ match }) => {\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    const getUserData = async () => {\n      const snap = await dbService.doc(`profile/${match.params.userId}`).get();\n      const data = snap.data();\n      setUserData(data);\n    };\n    getUserData();\n  }, [match]);\n\n  const friends = useFriendsList(userData?.userId);\n  return (\n    <div className=\"otherprofile\">\n      <p>{userData?.userName}'s profile</p>\n      <p>unit : {userData?.unit}</p>\n      <p>list of friends</p>\n      {userData ? <ul className=\"friendslist\">{friends}</ul> : <p>loading</p>}\n      {userData && <FriendButton otherId={userData.userId} />}\n    </div>\n  );\n};\n\nexport default OtherProfile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => {\n  return (\n    <>\n      <h1>Page Not Found</h1>\n      <Link to=\"/\">home</Link>\n    </>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <p>SGT Park</p>\n      <a href=\"https://github.com/ParkChangSun/kta\">Github</a>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth/Auth\";\nimport Home from \"routes/Home/Home\";\nimport Navigation from \"components/Navigation/Navigation\";\nimport MyProfile from \"routes/MyProfile/MyProfile\";\nimport OtherProfile from \"routes/OtherProfile/OtherProfile\";\nimport NotFound from \"routes/NotFound/NotFound\";\nimport Footer from \"./Footer\";\n\nconst AppRouter = ({ isLoggedIn, setIsLoggedIn }) => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      {isLoggedIn && <Navigation setIsLoggedIn={setIsLoggedIn} />}\n      {isLoggedIn ? (\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/myprofile\">\n            <MyProfile />\n          </Route>\n          <Route\n            path=\"/profile/:userId\"\n            render={(props) => <OtherProfile {...props} />}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      ) : (\n        <Switch>\n          <Route exact path=\"/\">\n            <Auth />\n          </Route>\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      )}\n      <Footer />\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import { authService, dbService } from \"mybase\";\nimport React, { useEffect, useState } from \"react\";\nimport { UserIdContext } from \"utils/firestore\";\nimport AppRouter from \"./AppRouter\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserId(user.uid);\n        setIsLoggedIn(true);\n      } else {\n        setUserId(\"\");\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (userId !== \"\") {\n      const unSubscribe = dbService\n        .doc(`profile/${userId}`)\n        .onSnapshot((snapshot) => {\n          setUserObj(snapshot.data());\n          setInit(true);\n        });\n      return unSubscribe;\n    } else {\n      console.log(\"userid is null\");\n      setInit(true);\n    }\n  }, [userId]);\n\n  return (\n    <UserIdContext.Provider value={userObj}>\n      {init ? (\n        <AppRouter isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />\n      ) : (\n        <h1>initializing...</h1>\n      )}\n    </UserIdContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}